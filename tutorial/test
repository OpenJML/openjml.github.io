#! /bin/bash

J=../../OpenJML/OpenJML21
X=0 
files=`ls *.java`
for f in $files ; do
  o=`echo $f | sed -e 's/java/out/'`;
  c=`cat $f | head -1 | sed -e 'sx//[ ]*xx' | sed -e s/\\$@/$f/ | sed -e "sxopenjmlx$J/openjmlxg" | grep -v '##'`
  if [ "$c" != "" ]; then 
    echo EXEC "$c"
    bash -c "$c --specs-path ../../Specs/specs" > logt  2>&1
    e=$?
    grep -v "Note:" logt > log
    if [ -e $o ]; then 
	if [ $e -eq "0" ]; then 
	    if [ "$f" != "T_PureMethod1.java" ]; then X=1; echo $f "has out file but exit code of 0"; fi; ## Special case of all warnings so 0 exit code
	fi 
	cat log | sed -e 's/[0-9][0-9.]* secs/TTTT secs/' | sed -e 's/DURATION:[ ]*TTTT/DURATION:          TTTT/' | tee $o.actual | cmp -s - $o ; z=$? ;
	if [ $z -ne "0" ]; then 
	    n=1
	    while [ -e $o$n ]; do
		cmp -s $o.actual $o$n && z=$? && break
		(( n++ ))
            done
	    if [ $z -ne 0 ]; then
		diff $o.actual $o
	        X=1; echo $f "has wrong output" ;
	    else
		rm $o.actual
	    fi
        else
            rm $o.actual
	fi 
    elif [ -n "$( cat log )" ]; then 
	echo "OK example has output: " $f 
	cat log 
    elif [ $e -ne "0" ]; then 
	X=1; echo "OK example has unexpected exit code: " $f $e 
    fi ; 
  else
    echo "Skipping non-deterministic test " $f ;
  fi ;
done 
for f in *.check ; do echo $f; source $f || X=1; done 

for f in exercises/*.java ; do 
  echo Checking $f
  openjml --esc $f > logx || { X=1; echo $f FAILED; }
done
rm -rf logt log logx
exit $X 

